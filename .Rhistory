text=element_text(size=13),
axis.text.x=element_text(colour="black", size=15, angle=0),
axis.text.y=element_text(colour="black", size=15),
plot.margin = unit(c(0,1,0.3,0.3), "cm")
)
ggsave("/Users/mengbing/Desktop/plot_255.pdf", width = 6, height = 5)
ggplot(dd, aes(X, Y)) +
geom_point(shape = 3, size = 0.5)  +
scale_x_continuous(labels = comma, breaks = seq(1, 255, length.out = 5)) +
scale_y_continuous(labels = comma, breaks = seq(1, 255, length.out = 5)) +
labs(x = '测试') +
theme_bw() +
theme(legend.position="right",
legend.direction="vertical",
axis.line=element_line(size=0.5, colour="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.spacing=unit(0, 'npc'),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=13),
axis.text.x=element_text(colour="black", size=15, angle=0),
axis.text.y=element_text(colour="black", size=15),
plot.margin = unit(c(0,1,0.3,0.3), "cm")
)
ggplot(dd, aes(X, Y)) +
geom_point(shape = 3, size = 0.5)  +
scale_x_continuous(labels = comma, breaks = seq(1, 255, length.out = 5)) +
scale_y_continuous(labels = comma, breaks = seq(1, 255, length.out = 5)) +
# labs(x = '') +
theme_bw() +
theme(legend.position="right",
legend.direction="vertical",
axis.line=element_line(size=0.5, colour="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.spacing=unit(0, 'npc'),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=18),
axis.text.x=element_text(colour="black", size=15, angle=0),
axis.text.y=element_text(colour="black", size=15),
plot.margin = unit(c(0,1,0.3,0.3), "cm")
)
set.seed(10)
x <- sample(0:(2**17-1), 2e3, replace = TRUE)
dd <- data.frame(x, x)
colnames(dd) <- c("X", "Y")
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
ggplot(dd, aes(X, Y)) +
geom_point(shape = 3, size = 0.5)  +
scale_x_continuous(labels = comma, breaks = seq(0, 2**17-1, length.out = 5)) +
scale_y_continuous(labels = comma, breaks = seq(0, 2**17-1, length.out = 5)) +
theme_bw() +
theme(legend.position="right",
legend.direction="vertical",
axis.line=element_line(size=0.5, colour="black"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.spacing=unit(0, 'npc'),
panel.background=element_blank(),
plot.title=element_text(size=18, face="bold"),
text=element_text(size=13),
axis.text.x=element_text(colour="black", size=15, angle=0),
axis.text.y=element_text(colour="black", size=15),
plot.margin = unit(c(0,1,0.3,0.3), "cm")
)
1+2*exp(0.02) *1.5**100
exp(10)
exp(-log1p(1+2*exp(10)))
exp(-log1p(1+2)
)
exp(-log1p(1+2 * exp(2)))
exp(-log1p(1+0.5 * exp(2)))
exp(-log1p(1+0.25 * exp(2)))
exp(-log1p(1+0.25 * exp(10)))
x = 3**(-100)*exp(0.02)
y = 2**(-100)*2
x/(x+y)
1 / (1 + 0.25 * 3**100/2**70 * exp(0.02))
1 / (1 + 0.25 * 2**100/2**70 * exp(0.02))
1 / (1 + 0.25 * 2**100/2**70 * exp(0.02) * exp(-1/0.002))
1 / (1 + 0.25 * 2**100/2**70 * exp(0.02) * exp(-1))
1 / (1 + 0.25 * 2**100/2**70 * exp(0.02) * exp(-1/2/0.01 * (10**2)))
1 / (1 + 0.25 * 3**100/2**70 * exp(0.02) * exp(-1/2/0.01 * (10**2)))
exp(-1/2/0.01 * (10**2))
1 / (1 + 0.6 * 3**100/2**70 * exp(0.02) * exp(-1/2/0.01 * (10**2)))
1 / (1 + 0.6 * (exp(-10)+2)**100/2**100 / exp(-10*0) * exp(0.005 * (-10+1)**2) * exp(-1/2/0.01 * ((-10+10)**2)))
1 / (1 + 0.3 * (exp(-10)+2)**100/2**100 / exp(-10*0) * exp(0.005 * (-10+1)**2) * exp(-1/2/0.01 * ((-10+10)**2)))
1 / (1 + 0.8 * (exp(-10)+2)**100/2**100 / exp(-10*0) * exp(0.005 * (-10+1)**2) * exp(-1/2/0.01 * ((-10+10)**2)))
??rnorm_multi
install.packages("faux")
library(faux)
set.seed(20220919)
sim_data <- rnorm_multi(n = 100, mu = c(0, 0), sd = c(1, 0.5), r = c(0.8), varnames = c("y1", "y2"), empirical = FALSE) %>%
rowid_to_column("id")
library(dplyr)
sim_data <- rnorm_multi(n = 100, mu = c(0, 0), sd = c(1, 0.5), r = c(0.8), varnames = c("y1", "y2"), empirical = FALSE) %>%
rowid_to_column("id")
library(tidyverse)
sim_data <- rnorm_multi(n = 100, mu = c(0, 0), sd = c(1, 0.5), r = c(0.8), varnames = c("y1", "y2"), empirical = FALSE) %>%
rowid_to_column("id")
set.seed(20220919)
sim_data <- rnorm_multi(n = 100, mu = c(0, 0), sd = c(1, 0.5), r = c(0.8), varnames = c("y1", "y2"), empirical = FALSE) %>%
rowid_to_column("id")
sim_data_long <- sim_data %>%
pivot_longer(!id, names_to = "occasion", values_to = "outcome") %>%
mutate(occasion = as.factor(occasion))
model_1 <- lm(outcome ~ occasion, data = sim_data_long)
summary(model_1)
sim_data
sim_data_long <- sim_data %>%
pivot_longer(!id, names_to = "occasion", values_to = "outcome") %>%
mutate(occasion = as.factor(occasion))
sim_data_long
model_1 <- lm(outcome ~ occasion, data = sim_data_long)
summary(model_1)
# library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(root.dir = normalizePath("/Users/mengbing/Dropbox (University of Michigan)/[team_folder]BIOSTAT653F22/homework/homework3/solution"))
# knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(foreign)
library(tidyverse)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#full model
library(geepack)
model1 <- geeglm(number ~ factor(trt) + factor(year)+ factor(trt)*factor(year), data=longep, id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model1)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
longep
View(longep)
waves=as.integer(longep$Ptime)
waves
epilepsy_long$week
library(knitr)
opts_chunk$set(collapse=TRUE, fig.align='center', tidy=TRUE, tidy.opts=list(blank=TRUE, width.cutoff=40), warning=FALSE,message=FALSE)
rm(list=ls())
library(tidyverse)
library(reshape2)
library(foreign)
library(geepack)
library(haven)
library(ggplot2)
library(tidyr)
library(dplyr)
epilepsy <- as.data.frame(read_dta("epilepsy.dta"))
epilepsy_long =  melt(epilepsy, id.vars = c("id", "trt","age"),
measure.vars = c("y0","y1", "y2","y3","y4"),
value.name = "Y",
variable.name = "week.f")
epilepsy_long$week <- as.integer(epilepsy_long$week.f)
epilepsy_long = epilepsy_long[order(epilepsy_long$id),]
epilepsy_long$Ptime <- (1 - (epilepsy_long$week == 1)) * 1
epilepsy_long$Ptime
m2 = geeglm(Y ~ factor(trt)*factor(Ptime), data = epilepsy_long,
id = id, corstr = "unstructured", waves = epilepsy_long$Ptime,
family = poisson("log"), std.err ='san.se')
library(foreign)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
View(epilepsy_long)
m2 = geeglm(Y ~ factor(trt)*factor(Ptime), data = epilepsy_long,
id = id, corstr = "unstructured", waves = epilepsy_long$Ptime,
family = poisson("log"), std.err ='san.se')
longep
epilepsy_long$Ptime
trt
epilepsy_long
m2 = geeglm(Y ~ factor(trt)*factor(Ptime), data = epilepsy_long,
id = id, corstr = "unstructured", waves = epilepsy_long$Ptime,
family = poisson("log"), std.err ='san.se')
model3 <- geeglm(number ~ trt*Ptime, data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
model3 <- geeglm(number ~ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
model3 <- geeglm(number ~ factor(trt)*factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
model3 <- geeglm(number ~ factor(trt) + factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
library(foreign)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#full model
library(geepack)
model1 <- geeglm(number ~ factor(trt) + factor(year)+ factor(trt)*factor(year), data=longep, id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model1)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#longep$year=as.integer(longep$year)
#reduced model
model2 <- geeglm(number ~ factor(year), data=longep,
id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model2)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
#model
library(geepack)
model3 <- geeglm(number ~ factor(trt)*factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
model3 <- geeglm(number ~ factor(trt) + factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
library(foreign)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#full model
library(geepack)
model1 <- geeglm(number ~ factor(trt) + factor(year)+ factor(trt)*factor(year), data=longep, id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model1)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#reduced model
model2 <- geeglm(number ~ factor(year), data=longep,
id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model2)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
#model
library(geepack)
model3 <- geeglm(number ~ factor(trt)*factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
# library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(root.dir = normalizePath("/Users/mengbing/Dropbox (University of Michigan)/[team_folder]BIOSTAT653F22/homework/homework3/solution"))
# knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(collapse=TRUE, fig.align='center', tidy=TRUE, tidy.opts=list(blank=TRUE, width.cutoff=40), warning=FALSE,message=FALSE)
rm(list=ls())
library(tidyverse)
library(reshape2)
library(foreign)
library(geepack)
library(haven)
library(ggplot2)
library(tidyr)
library(dplyr)
library(foreign)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#full model
library(geepack)
model1 <- geeglm(number ~ factor(trt) + factor(year)+ factor(trt)*factor(year), data=longep, id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model1)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#longep$year=as.integer(longep$year)
#reduced model
model2 <- geeglm(number ~ factor(year), data=longep,
id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model2)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
#model
library(geepack)
model3 <- geeglm(number ~ factor(trt)*factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
model3 <- geeglm(number ~ factor(trt) + factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"),
corstr=("unstructured"))
# library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(root.dir = normalizePath("/Users/mengbing/Dropbox (University of Michigan)/[team_folder]BIOSTAT653F22/homework/homework3/solution"))
# knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(foreign)
library(tidyverse)
epilepsy <- read.dta("epilepsy.dta")
#convert data from wide to long
longep=pivot_longer(epilepsy, cols=c("y0", "y1", "y2", "y3", "y4"))
longep=rename(longep, number=value)
longep=rename(longep, year=name)
#full model
library(geepack)
model1 <- geeglm(number ~ factor(trt) + factor(year)+ factor(trt)*factor(year), data=longep, id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model1)
#change year to integer
longep$year=ifelse(longep$year=="y0", 0, longep$year)
longep$year=ifelse(longep$year=="y1", 1, longep$year)
longep$year=ifelse(longep$year=="y2", 2, longep$year)
longep$year=ifelse(longep$year=="y3", 3, longep$year)
longep$year=ifelse(longep$year=="y4", 4, longep$year)
#reduced model
model2 <- geeglm(number ~ factor(year), data=longep,
id = id, waves=longep$year, family=poisson(link="log"),
corstr=("unstructured"))
summary(model2)
#create Ptime variable
longep$Ptime<-ifelse(longep$year=="0", 0, 1)
#model
library(geepack)
longep
model3 <- geeglm(number ~ factor(trt)*factor(Ptime)+ factor(trt)*factor(Ptime), data=longep, id = id, waves=as.integer(longep$Ptime), family=poisson(link="log"), corstr=("unstructured"))
Rcpp::sourceCpp("Desktop/Untitled.cpp")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(warn = -1)
install.packages("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_0.1.0.tar.gz", repos = NULL, type="source")
library(poLCA)
library(phylobase)
library(ape)
library(data.table)
library(ggplot2)
library(parallel)
library(BayesLogit)
library(truncnorm)
library(Matrix)
library(matrixStats)
library(extraDistr)
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/loglikehoods.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/utils.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/MH_tree.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/initialization.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/Gibbs_lcm.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/ddtlcm_fit.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/summary_functions.R")
# source("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/tree_multivariate_binary/ddtlcm_package/R/simulate_DDT_functions.R")
# library(ddtlcm)
load("../hchs_simulated_data/hchs_simulated_data.RData")
# extract the reponse matrix
response_matrix <- sim_data$response_matrix
# number of individuals
N <- dim(response_matrix)[1]
# number of pre-defined major food groups
G <- length(num_items_per_group)
# total number of items. Equals to the number of columns of sim_data$response_matrix
J <- sum(num_items_per_group)
item_group_membership <- rep(1:G, num_items_per_group)
# a list of item group membership indices of columns of data
item_membership_list <- list()
for (g in 1:G) {
item_membership_list[[g]] <- which(item_group_membership == g)
}
rm(item_group_membership)
# dimension of the simulated response matrix
cat("N =", N, ", J =", J)
library(ddtlcm)
library(rstan)
library(devtools)
devtools::install_github("smwu/baysc"
)
install.packages("rstantools")
devtools::install_github("smwu/baysc")
install.packages("rstan")
install.packages("rstan")
remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan")
devtools::install_github("smwu/baysc")
remove.packages("Rcpp")
remove.packages("Rcpp", lib="/Library/Frameworks/R.framework/Versions/4.2/Resources/miworkspace-library")
remove.packages("Rcpp", lib="/Library/Frameworks/R.framework/Versions/4.2/Resources/miworkspace-library")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
remove.packages("RcppArmadillo")
remove.packages("RcppArmadillo", lib="/Library/Frameworks/R.framework/Versions/4.2/Resources/miworkspace-library")
install.packages("RcppArmadillo")
library(RcppEigen)
install.packages("RcppEigen")
devtools::install_github("smwu/baysc")
library(baysc)
data("data_nhanes")
force(data_nhanes)
x_mat <- data_nhanes[, c("citrus", "oth_fruit", "fruit_juice", "dark_green", "tomatoes", "oth_red", "potatoes", "oth_starchy", "oth_veg", "whole_grain", "ref_grain", "meat", "cured_meats", "organ", "poultry", "seafood_high", "seafood_low", "eggs", "soybean", "nuts", "leg_protein", "milk", "yogurt", "cheese", "oils", "solid_fats", "add_sugars", "drinks")]
x_mat <- as.matrix(x_mat)
y_all <- data_nhanes$BP_flag
library(baysc)
data("data_nhanes")
x_mat <- data_nhanes[, c("citrus", "oth_fruit", "fruit_juice", "dark_green", "tomatoes", "oth_red", "potatoes", "oth_starchy", "oth_veg", "whole_grain", "ref_grain", "meat", "cured_meats", "organ", "poultry", "seafood_high", "seafood_low", "eggs", "soybean", "nuts", "leg_protein", "milk", "yogurt", "cheese", "oils", "solid_fats", "add_sugars", "drinks")]
x_mat <- as.matrix(x_mat)
y_all <- data_nhanes$BP_flag
# Survey stratum indicators
stratum_id <- data_nhanes$stratum_id
# Survey cluster indicators
cluster_id <- data_nhanes$cluster_id
# Survey sampling weights
sampling_wt <- data_nhanes$sample_wt
# Create dataframe of additional confounders
V_data <- data_nhanes %>% select(age_cat, racethnic, smoker, physactive)
library(dplyr)
data("data_nhanes")
x_mat <- data_nhanes[, c("citrus", "oth_fruit", "fruit_juice", "dark_green", "tomatoes", "oth_red", "potatoes", "oth_starchy", "oth_veg", "whole_grain", "ref_grain", "meat", "cured_meats", "organ", "poultry", "seafood_high", "seafood_low", "eggs", "soybean", "nuts", "leg_protein", "milk", "yogurt", "cheese", "oils", "solid_fats", "add_sugars", "drinks")]
x_mat <- as.matrix(x_mat)
y_all <- data_nhanes$BP_flag
# Survey stratum indicators
stratum_id <- data_nhanes$stratum_id
# Survey cluster indicators
cluster_id <- data_nhanes$cluster_id
# Survey sampling weights
sampling_wt <- data_nhanes$sample_wt
# Create dataframe of additional confounders
V_data <- data_nhanes %>% select(age_cat, racethnic, smoker, physactive)
# Regression formula for additional confounders
glm_form <- "~ age_cat + racethnic + smoker + physactive"
# Run SWOLCA
res_swolca <- swolca(x_mat = x_mat, y_all = y_all, V_data = V_data,
glm_form = glm_form, sampling_wt = sampling_wt,
cluster_id = cluster_id, stratum_id = stratum_id,
run_sampler = "both", adapt_seed = 888, n_runs = 300,
burn = 150, thin = 3, update = 20, save_res = FALSE)
# Run SWOLCA
res_swolca <- swolca(x_mat = x_mat, y_all = y_all, V_data = V_data,
glm_form = glm_form, sampling_wt = sampling_wt,
cluster_id = cluster_id, stratum_id = stratum_id,
run_sampler = "both", adapt_seed = 888, n_runs = 300,
burn = 150, thin = 3, update = 20, save_res = FALSE)
# Apply variance adjustment
res_swolca_adjust <- swolca_var_adjust(res = res_swolca, adjust_seed = 888,
num_reps = 100, save_res = FALSE)
res_swolca_adjust
summary(res_swolca_adjust)
plot_pattern_profiles(res = res_swolca_adjust)
regr_coefs <- get_regr_coefs(res = res_swolca_adjust, ci_level = 0.95, digits = 2)
plot_regr_coefs(regr_coefs = regr_coefs, res = res_swolca_adjust)
class(res_swolca)
summary.swolca <- function(x){
mean(res_swolca$estimates)
}
summary(res_swolca)
summary.swolca <- function(x){
mean(res_swolca$estimates, na.rm = TRUE)
}
summary(res_swolca)
summary.swolca <- function(x){
mean(res_swolca$estimates$theta_red, na.rm = TRUE)
}
summary(res_swolca)
?sample.int
set.seed(40)
N=5*10
x <- matrix(sample.int(2), nrow = 5, ncol = 10)
heatmap(x)
x
image(x)
image(t(x))
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, at = seq(0, 10, by=1), labels = paste0("Item ", 1:10), xpd=NA)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, at = seq(1, 10, by=1), labels = paste0("Item ", 1:10), xpd=NA)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, labels = paste0("Item ", 1:10), xpd=NA)
image(t(x), yaxt= "n", col = c("blue", "gold"))
seq(0, 1, by=0.1)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, at = seq(0.1, 1, by=0.1), labels = paste0("Item ", 1:10), xpd=NA)
?seq
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, at = seq(0, 1, length.out = 10), labels = paste0("Item ", 1:10), xpd=NA)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"))
axis(side=1, at = seq(0, 1, length.out = 10), labels = paste0("Item ", 1:10), xpd=NA, cex = 1.5)
image(t(x), xaxt= "n", col = c("blue", "gold"))
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"), cex = 1.5)
axis(side=1, at = seq(0, 1, length.out = 10), labels = paste0("Item ", 1:10), xpd=NA, cex = 1.5)
axis(side=2, at = seq(0, 1, length.out = 5), labels = paste0("Individual ", 1:5), xpd=NA, cex = 1.5)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"), cex = 1.5)
axis(side=1, at = seq(0, 1, length.out = 10), labels = paste0("Item ", 1:10), xpd=NA, cex = 1.5)
axis(side=2, at = seq(0, 1, length.out = 5), labels = paste0("Individual ", 1:5), xpd=NA, cex = 1.5, las = 2)
image(t(x), xaxt= "n", yaxt= "n", col = c("blue", "gold"), cex = 1.5)
axis(side=1, at = seq(0, 1, length.out = 10), labels = paste0("Item ", 1:10), xpd=NA, cex = 1.5)
axis(side=2, at = seq(0, 1, length.out = 5), labels = paste0("i = ", 1:5), xpd=NA, cex = 1.5, las = 2
)
setwd("/Users/mengbing/Dropbox (University of Michigan)/from_box/research/R_packages/ddtlcm")
devtools::document()
devtools::build()
